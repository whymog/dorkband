{"version":3,"sources":["App.module.scss","components/Song/styles.module.scss","images/favorite-active.svg","images/favorite-inactive.svg","components/Song/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Song","props","id","title","artist","year","genre","owned","isDarkMode","isFavorite","toggleFavorite","className","styles","song","unowned","dark","songData","primaryData","secondaryData","favorite","src","favoriteActive","favoriteInactive","onClick","alt","App","state","filters","isOwned","searchString","genres","getGenres","db","isShowingGenreFilters","ownedSongs","getOwnedSongsCount","sortByTitle","totalSongs","length","window","localStorage","getItem","setItem","JSON","stringify","document","getElementById","value","this","setState","confirm","forceUpdate","filter","favorites","parse","filteredSongs","forEach","indexOf","toLowerCase","match","push","songs","sortedSongs","sort","a","b","songGenres","Set","e","target","name","faveIndex","splice","preventDefault","console","log","getFilteredSongs","getSortedSongs","previousEntryName","alphabet","Array","from","app","version","darkModeToggle","toggleDarkMode","bind","options","bold","option","action","onSubmit","updateSearchString","textInput","type","placeholder","onChange","toggleOwnedSongs","checked","htmlFor","toggleFavoriteSongs","toggleSortBy","toggleVisibleGenres","map","i","key","button","active","inactive","setGenreFilter","clearFilters","clearFavorites","jumpToLetterWrapper","letter","jumpToLetterLink","toUpperCase","scrollIntoView","behavior","shouldInsertNewLetter","newEntryName","charAt","Fragment","sectionHeader","backToTop","scroll","top","left","React","Component","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.303c3803.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__24E1d\",\"title\":\"App_title__22DKr\",\"version\":\"App_version__3BlHY\",\"options\":\"App_options__3B4MI\",\"option\":\"App_option__2Ltr_\",\"textInput\":\"App_textInput__CCFkR\",\"darkModeToggle\":\"App_darkModeToggle__3vuHS\",\"genres\":\"App_genres__3P9bB\",\"button\":\"App_button__14Dj6\",\"active\":\"App_active__1DDPP\",\"jumpToLetterWrapper\":\"App_jumpToLetterWrapper__14_IW\",\"jumpToLetterLink\":\"App_jumpToLetterLink__202RQ\",\"sectionHeader\":\"App_sectionHeader__1-b4N\",\"backToTop\":\"App_backToTop__25_4B\",\"dark\":\"App_dark__11VOh\",\"bold\":\"App_bold__5Gaz3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"song\":\"styles_song__3SJSK\",\"primaryData\":\"styles_primaryData__1L1qt\",\"secondaryData\":\"styles_secondaryData__GNlYB\",\"favorite\":\"styles_favorite__1wFPc\",\"owned\":\"styles_owned__1g0cd\",\"unowned\":\"styles_unowned__23qkd\",\"dark\":\"styles_dark__1VHr_\"};","module.exports = __webpack_public_path__ + \"static/media/favorite-active.acfcbe45.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite-inactive.de487b6e.svg\";","import React from \"react\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nimport favoriteActive from \"../../images/favorite-active.svg\";\r\nimport favoriteInactive from \"../../images/favorite-inactive.svg\";\r\n\r\nfunction Song(props) {\r\n  const { id, title, artist, year, genre, owned, isDarkMode, isFavorite, toggleFavorite } = props;\r\n\r\n  return (\r\n    <div className={`${styles.song} ${owned ? styles.owned : styles.unowned} ${isDarkMode ? styles.dark : \"\"}`}>\r\n      <div className={styles.songData}>\r\n        <div className={styles.primaryData}>\r\n          {artist} - \"{title}\"\r\n        </div>\r\n        <div className={styles.secondaryData}>\r\n          {year} | {genre} | {owned === \"Y\" ? \"In library ✅\" : \"Not in library ❌\"}\r\n        </div>\r\n      </div>\r\n      <div className={styles.favorite}>\r\n        <img\r\n          src={isFavorite ? favoriteActive : favoriteInactive}\r\n          onClick={() => toggleFavorite(id)}\r\n          alt={isFavorite ? \"favorite song\" : \"click to favorite this song\"}\r\n        ></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Song;\r\n","import React from \"react\";\r\n\r\nimport Song from \"./components/Song/index\";\r\nimport db from \"./data/db.json\";\r\nimport styles from \"./App.module.scss\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      filters: {\r\n        isFavorite: false,\r\n        isOwned: false,\r\n        genre: \"\",\r\n        searchString: \"\"\r\n      },\r\n      genres: this.getGenres(db),\r\n      isDarkMode: false,\r\n      isShowingGenreFilters: false,\r\n      ownedSongs: this.getOwnedSongsCount(),\r\n      sortByTitle: false,\r\n      totalSongs: db.length\r\n    };\r\n\r\n    // Initialize favorites in localStorage if not present\r\n    if (window.localStorage.getItem(\"favorites\") === null) {\r\n      window.localStorage.setItem(\"favorites\", JSON.stringify([]));\r\n    }\r\n  }\r\n\r\n  clearFilters() {\r\n    const searchInput = document.getElementById(\"search\");\r\n    searchInput.value = \"\";\r\n\r\n    this.setState({\r\n      filters: {\r\n        isOwned: false,\r\n        genre: \"\",\r\n        searchString: \"\"\r\n      },\r\n      isShowingGenreFilters: false,\r\n      sortByTitle: false\r\n    });\r\n  }\r\n\r\n  clearFavorites() {\r\n    const shouldClearFavorites = window.confirm(\r\n      \"WARNING: Are you sure you want to clear out all of your favorite songs?\"\r\n    );\r\n\r\n    if (shouldClearFavorites) {\r\n      window.localStorage.setItem(\"favorites\", JSON.stringify([]));\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  getOwnedSongsCount() {\r\n    const ownedSongs = db.filter(song => song.owned === \"Y\");\r\n    return ownedSongs.length;\r\n  }\r\n\r\n  getFilteredSongs() {\r\n    const { filters } = this.state;\r\n    const favorites = JSON.parse(window.localStorage.getItem(\"favorites\"));\r\n\r\n    let filteredSongs = [];\r\n\r\n    db.forEach(song => {\r\n      if (filters.isOwned && song.owned !== \"Y\") return;\r\n      if (filters.isFavorite && favorites.indexOf(song.id) < 0) return;\r\n      if (filters.genre.length && filters.genre !== song.genre) return;\r\n      if (\r\n        filters.searchString.length &&\r\n        !song.title.toLowerCase().match(filters.searchString.toLowerCase()) &&\r\n        !song.artist.toLowerCase().match(filters.searchString.toLowerCase())\r\n      )\r\n        return;\r\n\r\n      filteredSongs.push(song);\r\n    });\r\n\r\n    return filteredSongs;\r\n  }\r\n\r\n  getSortedSongs(songs, sortByTitle) {\r\n    let sortedSongs = songs;\r\n\r\n    sortedSongs.sort((a, b) => {\r\n      if (sortByTitle) {\r\n        if (a.title < b.title) return -1;\r\n        else if (a.title > b.title) return 1;\r\n        return 0;\r\n      } else {\r\n        if (a.artist < b.artist) return -1;\r\n        else if (a.artist > b.artist) return 1;\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    return sortedSongs;\r\n  }\r\n\r\n  getGenres(songs) {\r\n    let songGenres = [];\r\n\r\n    songs.forEach(song => songGenres.push(song.genre));\r\n\r\n    return new Set(songGenres);\r\n  }\r\n\r\n  setGenreFilter(e) {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        genre: e.target.name\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleFavoriteSongs() {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        isFavorite: !this.state.filters.isFavorite\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleOwnedSongs() {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        isOwned: !this.state.filters.isOwned\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleVisibleGenres() {\r\n    this.setState({\r\n      isShowingGenreFilters: !this.state.isShowingGenreFilters\r\n    });\r\n  }\r\n\r\n  toggleDarkMode() {\r\n    this.setState({\r\n      isDarkMode: !this.state.isDarkMode\r\n    });\r\n  }\r\n\r\n  toggleFavorite(id) {\r\n    if (id >= 0) {\r\n      const favorites = JSON.parse(window.localStorage.getItem(\"favorites\"));\r\n\r\n      const faveIndex = favorites.indexOf(id);\r\n\r\n      if (faveIndex > -1) {\r\n        favorites.splice(faveIndex, 1);\r\n      } else {\r\n        favorites.push(id);\r\n      }\r\n\r\n      window.localStorage.setItem(\"favorites\", JSON.stringify(favorites));\r\n\r\n      // Since we're only using localStorage and not state to manage favorites,\r\n      // React needs to be told to update\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  toggleSortBy() {\r\n    this.setState({\r\n      sortByTitle: !this.state.sortByTitle\r\n    });\r\n  }\r\n\r\n  updateSearchString(e) {\r\n    e.preventDefault();\r\n    console.log(e.target[0].value);\r\n\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        searchString: e.target[0].value\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { totalSongs, ownedSongs, filters, isShowingGenreFilters, sortByTitle, isDarkMode } = this.state;\r\n    const { isFavorite, isOwned } = filters;\r\n\r\n    let filteredSongs = this.getFilteredSongs();\r\n    let sortedSongs = this.getSortedSongs(filteredSongs, sortByTitle);\r\n\r\n    const genres = [];\r\n    this.state.genres.forEach(genre => genres.push(genre));\r\n\r\n    let previousEntryName = \"\";\r\n\r\n    const alphabet = Array.from(\"abcdefghijklmnopqrstuvwxyz\");\r\n\r\n    // Get favorites\r\n    const favorites = JSON.parse(window.localStorage.getItem(\"favorites\"));\r\n\r\n    return (\r\n      <div className={`${styles.app} ${isDarkMode ? styles.dark : \"\"}`}>\r\n        <h1 className={styles.title}>\r\n          NickBand <span className={styles.version}>v0.1.1</span>{\" \"}\r\n          <span className={styles.darkModeToggle} onClick={this.toggleDarkMode.bind(this)}>\r\n            {isDarkMode ? \"🌙\" : \"🌞\"}\r\n          </span>\r\n        </h1>\r\n        <div className={styles.options}>\r\n          <div>\r\n            <span className={styles.bold}>{ownedSongs} songs</span> owned, {totalSongs} available\r\n          </div>\r\n          <div>{sortedSongs.length} shown</div>\r\n          <div className={styles.option}>\r\n            <form action=\".\" onSubmit={this.updateSearchString.bind(this)}>\r\n              <input\r\n                className={styles.textInput}\r\n                id=\"search\"\r\n                type=\"search\"\r\n                placeholder=\"Search for songs or artists...\"\r\n              ></input>\r\n            </form>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"ownedSongsToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleOwnedSongs.bind(this)}\r\n              checked={isOwned ? true : false}\r\n            />\r\n            <label htmlFor=\"ownedSongsToggle\">Show only songs that Nick owns</label>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"favoriteSongsToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleFavoriteSongs.bind(this)}\r\n              checked={isFavorite ? true : false}\r\n            />\r\n            <label htmlFor=\"favoriteSongsToggle\">Show only favorites</label>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"sortByToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleSortBy.bind(this)}\r\n              checked={sortByTitle ? true : false}\r\n            />\r\n            <label htmlFor=\"sortByToggle\">Sort by title</label>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"showGenresToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleVisibleGenres.bind(this)}\r\n              checked={isShowingGenreFilters}\r\n            />\r\n            <label htmlFor=\"showGenresToggle\">Filter by genre</label>\r\n          </div>\r\n          <div className={styles.genres}>\r\n            {isShowingGenreFilters &&\r\n              genres.map((genre, i) => (\r\n                <button\r\n                  key={i}\r\n                  className={`${styles.button} ${\r\n                    filters.genre.length && filters.genre === genre ? styles.active : styles.inactive\r\n                  }`}\r\n                  name={genre}\r\n                  onClick={this.setGenreFilter.bind(this)}\r\n                >\r\n                  {genre}\r\n                </button>\r\n              ))}\r\n          </div>\r\n          <button className={styles.button} onClick={this.clearFilters.bind(this)}>\r\n            CLEAR FILTERS\r\n          </button>\r\n          <button className={styles.button} onClick={this.clearFavorites.bind(this)}>\r\n            CLEAR FAVORITES\r\n          </button>\r\n          <div>\r\n            Jump to a letter:{\" \"}\r\n            <div className={styles.jumpToLetterWrapper}>\r\n              {alphabet.map(letter => (\r\n                <span\r\n                  key={letter}\r\n                  className={styles.jumpToLetterLink}\r\n                  onClick={() => {\r\n                    const element = document.getElementById(`section-${letter.toUpperCase()}`);\r\n                    element.scrollIntoView({ behavior: \"smooth\" });\r\n                  }}\r\n                >\r\n                  {letter.toUpperCase()}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {sortedSongs.map((song, i) => {\r\n          let shouldInsertNewLetter = false;\r\n          const newEntryName = sortByTitle ? song.title : song.artist;\r\n\r\n          if (\r\n            !previousEntryName.length ||\r\n            (previousEntryName.length && newEntryName.charAt(0) > previousEntryName.charAt(0))\r\n          ) {\r\n            shouldInsertNewLetter = true;\r\n          }\r\n\r\n          previousEntryName = newEntryName;\r\n\r\n          return (\r\n            <React.Fragment key={i}>\r\n              {shouldInsertNewLetter ? (\r\n                <div className={styles.sectionHeader}>\r\n                  <span id={`section-${newEntryName.charAt(0)}`}>{newEntryName.charAt(0)}</span>\r\n                  <span\r\n                    className={styles.backToTop}\r\n                    onClick={() => {\r\n                      window.scroll({\r\n                        top: 0,\r\n                        left: 0,\r\n                        behavior: \"smooth\"\r\n                      });\r\n                    }}\r\n                  >\r\n                    back to top\r\n                  </span>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Song\r\n                key={i}\r\n                isDarkMode={isDarkMode}\r\n                {...song}\r\n                isFavorite={favorites.indexOf(song.id) >= 0}\r\n                toggleFavorite={this.toggleFavorite.bind(this)}\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}