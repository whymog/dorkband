{"version":3,"sources":["App.module.scss","components/Song/styles.module.scss","components/Song/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Song","props","title","artist","year","genre","owned","isDarkMode","className","styles","song","unowned","dark","primaryData","secondaryData","App","state","filters","isOwned","searchString","genres","getGenres","db","isShowingGenreFilters","ownedSongs","getOwnedSongsCount","sortByTitle","totalSongs","length","document","getElementById","value","this","setState","filter","filteredSongs","forEach","toLowerCase","match","push","songs","sortedSongs","sort","a","b","songGenres","Set","console","log","e","target","name","preventDefault","getFilteredSongs","getSortedSongs","app","version","darkModeToggle","onClick","toggleDarkMode","bind","options","bold","option","action","onSubmit","updateSearchString","textInput","id","type","placeholder","onChange","toggleOwnedSongs","checked","htmlFor","toggleSortBy","toggleVisibleGenres","map","i","key","button","active","inactive","setGenreFilter","clearFilters","React","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,QAAU,qBAAqB,QAAU,qBAAqB,OAAS,oBAAoB,UAAY,uBAAuB,eAAiB,4BAA4B,OAAS,oBAAoB,OAAS,oBAAoB,OAAS,oBAAoB,KAAO,kBAAkB,KAAO,oB,gBCAtWD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,YAAc,4BAA4B,cAAgB,8BAA8B,MAAQ,sBAAsB,QAAU,wBAAwB,KAAO,uB,k12PCiB9LC,MAff,SAAcC,GAAQ,IACZC,EAAkDD,EAAlDC,MAAOC,EAA2CF,EAA3CE,OAAQC,EAAmCH,EAAnCG,KAAMC,EAA6BJ,EAA7BI,MAAOC,EAAsBL,EAAtBK,MAAOC,EAAeN,EAAfM,WAE3C,OACE,yBAAKC,UAAS,UAAKC,IAAOC,KAAZ,YAAoBJ,EAAQG,IAAOH,MAAQG,IAAOE,QAAlD,YAA6DJ,EAAaE,IAAOG,KAAO,KACpG,yBAAKJ,UAAWC,IAAOI,aACpBV,EADH,OACeD,EADf,KAGA,yBAAKM,UAAWC,IAAOK,eACpBV,EADH,MACYC,EADZ,MACgC,MAAVC,EAAgB,oBAAiB,2B,8kBCyN9CS,E,YA/Nb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAEDe,MAAQ,CACXC,QAAS,CACPC,SAAS,EACTb,MAAO,GACPc,aAAc,IAEhBC,OAAQ,EAAKC,UAAUC,GACvBf,YAAY,EACZgB,uBAAuB,EACvBC,WAAY,EAAKC,qBACjBC,aAAa,EACbC,WAAYL,EAAGM,QAdA,E,4EAmBGC,SAASC,eAAe,UAChCC,MAAQ,GAEpBC,KAAKC,SAAS,CACZhB,QAAS,CACPC,SAAS,EACTb,MAAO,GACPc,aAAc,IAEhBI,uBAAuB,EACvBG,aAAa,M,2CAMf,OADmBJ,EAAGY,OAAO,SAAAxB,GAAI,MAAmB,MAAfA,EAAKJ,QACxBsB,S,yCAGA,IACVX,EAAYe,KAAKhB,MAAjBC,QAEJkB,EAAgB,GAepB,OAbAb,EAAGc,QAAQ,SAAA1B,GACLO,EAAQC,SAA0B,MAAfR,EAAKJ,OACxBW,EAAQZ,MAAMuB,QAAUX,EAAQZ,QAAUK,EAAKL,SAEjDY,EAAQE,aAAaS,QACpBlB,EAAKR,MAAMmC,cAAcC,MAAMrB,EAAQE,aAAakB,gBACpD3B,EAAKP,OAAOkC,cAAcC,MAAMrB,EAAQE,aAAakB,iBAIxDF,EAAcI,KAAK7B,KAGdyB,I,qCAGMK,EAAOd,GACpB,IAAIe,EAAcD,EAclB,OAZAC,EAAYC,KAAK,SAACC,EAAGC,GACnB,OAAIlB,EACEiB,EAAEzC,MAAQ0C,EAAE1C,OAAe,EACtByC,EAAEzC,MAAQ0C,EAAE1C,MAAc,EAC5B,EAEHyC,EAAExC,OAASyC,EAAEzC,QAAgB,EACxBwC,EAAExC,OAASyC,EAAEzC,OAAe,EAC9B,IAIJsC,I,gCAGCD,GACR,IAAIK,EAAa,GAEjBL,EAAMJ,QAAQ,SAAA1B,GAAI,OAAImC,EAAWN,KAAK7B,EAAKL,SAE3C,IAAMe,EAAS,IAAI0B,IAAID,GAGvB,OAFAE,QAAQC,IAAI5B,GAELA,I,qCAGM6B,GACbjB,KAAKC,SAAS,CACZhB,QAAQ,EAAD,GACFe,KAAKhB,MAAMC,QADT,CAELZ,MAAO4C,EAAEC,OAAOC,W,yCAMpBnB,KAAKC,SAAS,CACZhB,QAAQ,EAAD,GACFe,KAAKhB,MAAMC,QADT,CAELC,SAAUc,KAAKhB,MAAMC,QAAQC,c,4CAMjCc,KAAKC,SAAS,CACZV,uBAAwBS,KAAKhB,MAAMO,0B,uCAKrCS,KAAKC,SAAS,CACZ1B,YAAayB,KAAKhB,MAAMT,e,qCAK1ByB,KAAKC,SAAS,CACZP,aAAcM,KAAKhB,MAAMU,gB,yCAIVuB,GACjBA,EAAEG,iBACFL,QAAQC,IAAIC,EAAEC,OAAO,GAAGnB,OAExBC,KAAKC,SAAS,CACZhB,QAAQ,EAAD,GACFe,KAAKhB,MAAMC,QADT,CAELE,aAAc8B,EAAEC,OAAO,GAAGnB,Y,+BAKtB,IAAD,SACqFC,KAAKhB,MAAzFW,EADD,EACCA,WAAYH,EADb,EACaA,WAAYP,EADzB,EACyBA,QAASM,EADlC,EACkCA,sBAAuBG,EADzD,EACyDA,YAAanB,EADtE,EACsEA,WACrEW,EAAYD,EAAZC,QAEJiB,EAAgBH,KAAKqB,mBACrBZ,EAAcT,KAAKsB,eAAenB,EAAeT,GAE/CN,EAAS,GAGf,OAFAY,KAAKhB,MAAMI,OAAOgB,QAAQ,SAAA/B,GAAK,OAAIe,EAAOmB,KAAKlC,KAG7C,yBAAKG,UAAS,UAAKC,IAAO8C,IAAZ,YAAmBhD,EAAaE,IAAOG,KAAO,KAC1D,wBAAIJ,UAAWC,IAAOP,OAAtB,YACW,0BAAMM,UAAWC,IAAO+C,SAAxB,QAA6C,IACtD,0BAAMhD,UAAWC,IAAOgD,eAAgBC,QAAS1B,KAAK2B,eAAeC,KAAK5B,OACvEzB,EAAa,eAAO,iBAGzB,yBAAKC,UAAWC,IAAOoD,SACrB,6BACE,0BAAMrD,UAAWC,IAAOqD,MAAOtC,EAA/B,UADF,WACkEG,EADlE,cAGA,6BAAMc,EAAYb,OAAlB,UACA,yBAAKpB,UAAWC,IAAOsD,QACrB,0BAAMC,OAAO,IAAIC,SAAUjC,KAAKkC,mBAAmBN,KAAK5B,OACtD,2BACExB,UAAWC,IAAO0D,UAClBC,GAAG,SACHC,KAAK,SACLC,YAAY,qCAIlB,yBAAK9D,UAAWC,IAAOsD,QACrB,2BACEK,GAAG,mBACHC,KAAK,WACLE,SAAUvC,KAAKwC,iBAAiBZ,KAAK5B,MACrCyC,UAASvD,IAEX,2BAAOwD,QAAQ,oBAAf,mCAEF,yBAAKlE,UAAWC,IAAOsD,QACrB,2BACEK,GAAG,eACHC,KAAK,WACLE,SAAUvC,KAAK2C,aAAaf,KAAK5B,MACjCyC,UAAS/C,IAEX,2BAAOgD,QAAQ,gBAAf,kBAEF,yBAAKlE,UAAWC,IAAOsD,QACrB,2BACEK,GAAG,mBACHC,KAAK,WACLE,SAAUvC,KAAK4C,oBAAoBhB,KAAK5B,MACxCyC,QAASlD,IAEX,2BAAOmD,QAAQ,oBAAf,oBAEF,yBAAKlE,UAAWC,IAAOW,QACpBG,GACCH,EAAOyD,IAAI,SAACxE,EAAOyE,GAAR,OACT,4BACEC,IAAKD,EACLtE,UAAS,UAAKC,IAAOuE,OAAZ,YACP/D,EAAQZ,MAAMuB,QAAUX,EAAQZ,QAAUA,EAAQI,IAAOwE,OAASxE,IAAOyE,UAE3E/B,KAAM9C,EACNqD,QAAS,EAAKyB,eAAevB,KAAK,IAEjCvD,MAIT,4BAAQG,UAAWC,IAAOuE,OAAQtB,QAAS1B,KAAKoD,aAAaxB,KAAK5B,OAAlE,kBAIDS,EAAYoC,IAAI,SAACnE,EAAMoE,GAAP,OACf,kBAAC,EAAD,eAAMC,IAAKD,EAAGvE,WAAYA,GAAgBG,W,GAzNlC2E,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpD,MACvB,2DCZNqD,IAASC,OAAO,kBAAC,EAAD,MAAS/D,SAASC,eAAe,SD2H3C,kBAAmB+D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4a4d3466.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__24E1d\",\"title\":\"App_title__22DKr\",\"version\":\"App_version__3BlHY\",\"options\":\"App_options__3B4MI\",\"option\":\"App_option__2Ltr_\",\"textInput\":\"App_textInput__CCFkR\",\"darkModeToggle\":\"App_darkModeToggle__3vuHS\",\"genres\":\"App_genres__3P9bB\",\"button\":\"App_button__14Dj6\",\"active\":\"App_active__1DDPP\",\"dark\":\"App_dark__11VOh\",\"bold\":\"App_bold__5Gaz3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"song\":\"styles_song__3SJSK\",\"primaryData\":\"styles_primaryData__1L1qt\",\"secondaryData\":\"styles_secondaryData__GNlYB\",\"owned\":\"styles_owned__1g0cd\",\"unowned\":\"styles_unowned__23qkd\",\"dark\":\"styles_dark__1VHr_\"};","import React from \"react\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nfunction Song(props) {\r\n  const { title, artist, year, genre, owned, isDarkMode } = props;\r\n\r\n  return (\r\n    <div className={`${styles.song} ${owned ? styles.owned : styles.unowned} ${isDarkMode ? styles.dark : \"\"}`}>\r\n      <div className={styles.primaryData}>\r\n        {artist} - \"{title}\"\r\n      </div>\r\n      <div className={styles.secondaryData}>\r\n        {year} | {genre} | {owned === \"Y\" ? \"In library ✅\" : \"Not in library ❌\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Song;\r\n","import React from \"react\";\r\nimport Song from \"./components/Song/index\";\r\nimport db from \"./data/db.json\";\r\nimport styles from \"./App.module.scss\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      filters: {\r\n        isOwned: false,\r\n        genre: \"\",\r\n        searchString: \"\"\r\n      },\r\n      genres: this.getGenres(db),\r\n      isDarkMode: false,\r\n      isShowingGenreFilters: false,\r\n      ownedSongs: this.getOwnedSongsCount(),\r\n      sortByTitle: false,\r\n      totalSongs: db.length\r\n    };\r\n  }\r\n\r\n  clearFilters() {\r\n    const searchInput = document.getElementById(\"search\");\r\n    searchInput.value = \"\";\r\n\r\n    this.setState({\r\n      filters: {\r\n        isOwned: false,\r\n        genre: \"\",\r\n        searchString: \"\"\r\n      },\r\n      isShowingGenreFilters: false,\r\n      sortByTitle: false\r\n    });\r\n  }\r\n\r\n  getOwnedSongsCount() {\r\n    const ownedSongs = db.filter(song => song.owned === \"Y\");\r\n    return ownedSongs.length;\r\n  }\r\n\r\n  getFilteredSongs() {\r\n    const { filters } = this.state;\r\n\r\n    let filteredSongs = [];\r\n\r\n    db.forEach(song => {\r\n      if (filters.isOwned && song.owned !== \"Y\") return;\r\n      if (filters.genre.length && filters.genre !== song.genre) return;\r\n      if (\r\n        filters.searchString.length &&\r\n        !song.title.toLowerCase().match(filters.searchString.toLowerCase()) &&\r\n        !song.artist.toLowerCase().match(filters.searchString.toLowerCase())\r\n      )\r\n        return;\r\n\r\n      filteredSongs.push(song);\r\n    });\r\n\r\n    return filteredSongs;\r\n  }\r\n\r\n  getSortedSongs(songs, sortByTitle) {\r\n    let sortedSongs = songs;\r\n\r\n    sortedSongs.sort((a, b) => {\r\n      if (sortByTitle) {\r\n        if (a.title < b.title) return -1;\r\n        else if (a.title > b.title) return 1;\r\n        return 0;\r\n      } else {\r\n        if (a.artist < b.artist) return -1;\r\n        else if (a.artist > b.artist) return 1;\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    return sortedSongs;\r\n  }\r\n\r\n  getGenres(songs) {\r\n    let songGenres = [];\r\n\r\n    songs.forEach(song => songGenres.push(song.genre));\r\n\r\n    const genres = new Set(songGenres);\r\n    console.log(genres);\r\n\r\n    return genres;\r\n  }\r\n\r\n  setGenreFilter(e) {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        genre: e.target.name\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleOwnedSongs() {\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        isOwned: !this.state.filters.isOwned\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleVisibleGenres() {\r\n    this.setState({\r\n      isShowingGenreFilters: !this.state.isShowingGenreFilters\r\n    });\r\n  }\r\n\r\n  toggleDarkMode() {\r\n    this.setState({\r\n      isDarkMode: !this.state.isDarkMode\r\n    });\r\n  }\r\n\r\n  toggleSortBy() {\r\n    this.setState({\r\n      sortByTitle: !this.state.sortByTitle\r\n    });\r\n  }\r\n\r\n  updateSearchString(e) {\r\n    e.preventDefault();\r\n    console.log(e.target[0].value);\r\n\r\n    this.setState({\r\n      filters: {\r\n        ...this.state.filters,\r\n        searchString: e.target[0].value\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { totalSongs, ownedSongs, filters, isShowingGenreFilters, sortByTitle, isDarkMode } = this.state;\r\n    const { isOwned } = filters;\r\n\r\n    let filteredSongs = this.getFilteredSongs();\r\n    let sortedSongs = this.getSortedSongs(filteredSongs, sortByTitle);\r\n\r\n    const genres = [];\r\n    this.state.genres.forEach(genre => genres.push(genre));\r\n\r\n    return (\r\n      <div className={`${styles.app} ${isDarkMode ? styles.dark : \"\"}`}>\r\n        <h1 className={styles.title}>\r\n          NickBand <span className={styles.version}>v0.1</span>{\" \"}\r\n          <span className={styles.darkModeToggle} onClick={this.toggleDarkMode.bind(this)}>\r\n            {isDarkMode ? \"🌞\" : \"🌙\"}\r\n          </span>\r\n        </h1>\r\n        <div className={styles.options}>\r\n          <div>\r\n            <span className={styles.bold}>{ownedSongs} songs</span> owned, {totalSongs} available\r\n          </div>\r\n          <div>{sortedSongs.length} shown</div>\r\n          <div className={styles.option}>\r\n            <form action=\".\" onSubmit={this.updateSearchString.bind(this)}>\r\n              <input\r\n                className={styles.textInput}\r\n                id=\"search\"\r\n                type=\"search\"\r\n                placeholder=\"Search for songs or artists...\"\r\n              ></input>\r\n            </form>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"ownedSongsToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleOwnedSongs.bind(this)}\r\n              checked={isOwned ? true : false}\r\n            />\r\n            <label htmlFor=\"ownedSongsToggle\">Show only songs that Nick owns</label>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"sortByToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleSortBy.bind(this)}\r\n              checked={sortByTitle ? true : false}\r\n            />\r\n            <label htmlFor=\"sortByToggle\">Sort by title</label>\r\n          </div>\r\n          <div className={styles.option}>\r\n            <input\r\n              id=\"showGenresToggle\"\r\n              type=\"checkbox\"\r\n              onChange={this.toggleVisibleGenres.bind(this)}\r\n              checked={isShowingGenreFilters}\r\n            />\r\n            <label htmlFor=\"showGenresToggle\">Filter by genre</label>\r\n          </div>\r\n          <div className={styles.genres}>\r\n            {isShowingGenreFilters &&\r\n              genres.map((genre, i) => (\r\n                <button\r\n                  key={i}\r\n                  className={`${styles.button} ${\r\n                    filters.genre.length && filters.genre === genre ? styles.active : styles.inactive\r\n                  }`}\r\n                  name={genre}\r\n                  onClick={this.setGenreFilter.bind(this)}\r\n                >\r\n                  {genre}\r\n                </button>\r\n              ))}\r\n          </div>\r\n          <button className={styles.button} onClick={this.clearFilters.bind(this)}>\r\n            CLEAR FILTERS\r\n          </button>\r\n        </div>\r\n        {sortedSongs.map((song, i) => (\r\n          <Song key={i} isDarkMode={isDarkMode} {...song} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}